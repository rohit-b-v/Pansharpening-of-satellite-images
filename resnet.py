# -*- coding: utf-8 -*-
"""resnet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eTJW3Adl7Kz7LoZVL8yXhv1RZ5ylhZUG
"""

import cv2
import gc
import glob
import numpy as np
!pip install rasterio
import rasterio
import tensorflow
from keras.models import Input, Model
from keras.layers import Conv2D
from tensorflow.keras.optimizers import Adam

from google.colab.patches import cv2_imshow

import numpy as np
from keras import layers
from keras.layers import Input, Add, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D, AveragePooling2D, MaxPooling2D, GlobalMaxPooling2D
from keras.models import Model, load_model
from keras.preprocessing import image
from keras.utils import layer_utils
from keras.utils.data_utils import get_file
from keras.applications.imagenet_utils import preprocess_input
import pydot
from IPython.display import SVG
from keras.utils.vis_utils import model_to_dot
#from keras.utils import plot_model
#from resnets_utils import *
from keras.initializers import glorot_uniform
import scipy.misc
from matplotlib.pyplot import imshow

def training_image_creation(img_ms, img_pan, n_factor):


    blurred_img_ms = np.zeros((img_ms.shape))

    for i in range(img_ms.shape[2]):
        blurred_img_ms[:, :, i] = cv2.GaussianBlur(img_ms[:, :, i], (5, 5), 0)

    blurred_img_ms_small = cv2.resize(blurred_img_ms, (int(img_ms.shape[1] / n_factor), int(img_ms.shape[0] / n_factor)),
                                      interpolation = cv2.INTER_AREA)
    blurred_img_ms_sam = cv2.resize(blurred_img_ms_small, (img_ms.shape[1], img_ms.shape[0]), interpolation = cv2.INTER_CUBIC)

    downsampled_img_pan = cv2.resize(img_pan, (img_ms.shape[1], img_ms.shape[0]),
                                     interpolation = cv2.INTER_AREA)[:, :, np.newaxis]

    training_sample_array = np.concatenate((blurred_img_ms_sam, downsampled_img_pan), axis = 2)

    return training_sample_array

def image_clip_to_segment(image_ms_array, train_image_array, image_height_size, image_width_size, percentage_overlap,
                          buffer):


    y_size = ((image_ms_array.shape[0] // image_height_size) + 1) * image_height_size
    y_pad = int(y_size - image_ms_array.shape[0])
    x_size = ((image_ms_array.shape[1] // image_width_size) + 1) * image_width_size
    x_pad = int(x_size - image_ms_array.shape[1])

    img_complete = np.pad(image_ms_array, ((0, y_pad), (0, x_pad), (0, 0)), mode = 'symmetric').astype(image_ms_array.dtype)
    train_complete = np.pad(train_image_array, ((0, y_pad), (0, x_pad), (0, 0)),
                            mode = 'symmetric').astype(train_image_array.dtype)

    img_list = []
    train_list = []

    for i in range(0, int(img_complete.shape[0] - (2 - buffer) * image_height_size),
                   int((1 - percentage_overlap) * image_height_size)):
        for j in range(0, int(img_complete.shape[1] - (2 - buffer) * image_width_size),
                       int((1 - percentage_overlap) * image_width_size)):
            img_original = img_complete[i : i + image_height_size, j : j + image_width_size, 0 : image_ms_array.shape[2]]
            img_list.append(img_original)
            train_original = train_complete[i : i + image_height_size, j : j + image_width_size, :]
            train_list.append(train_original)

    image_segment_array = np.zeros((len(img_list), image_height_size, image_width_size, image_ms_array.shape[2]))
    train_segment_array = np.zeros((len(train_list), image_height_size, image_width_size, train_image_array.shape[2]))

    for index in range(len(img_list)):
        image_segment_array[index] = img_list[index]
        train_segment_array[index] = train_list[index]

    return train_segment_array, image_segment_array

def training_data_generation(DATA_DIR, img_height_size, img_width_size, perc, buff):



    if perc < 0 or perc > 1:
        raise ValueError('Please input a number between 0 and 1 (inclusive) for perc.')

    if buff < 0 or buff > 1:
        raise ValueError('Please input a number between 0 and 1 (inclusive) for buff.')

    img_MS_files = glob.glob('mst*.png')
    img_PAN_files = glob.glob('pant*.tif')

    img_array_list = []
    train_array_list = []

    for file in range(7):

        switch = {
            0:'a',
            1:'b',
            2:'c',
            3:'d',
            4:'f',
            5:'r',
            6:'u'
        }
        with rasterio.open('mst'+switch[file]+'.png') as f:
            metadata = f.profile
            ms_img = np.transpose(f.read(tuple(np.arange(metadata['count']) + 1)), [1, 2, 0])
        with rasterio.open('pant'+switch[file]+'.png') as g:
            metadata_pan = g.profile
            pan_img = g.read(1)

        ms_to_pan_ratio = metadata['transform'][0] / metadata_pan['transform'][0]

        train_img = training_image_creation(ms_img, pan_img, n_factor = ms_to_pan_ratio)

        train_array, img_array = image_clip_to_segment(ms_img, train_img, img_height_size, img_width_size,
                                                       percentage_overlap = perc, buffer = buff)

        img_array_list.append(img_array)
        train_array_list.append(train_array)

    img_full_array = np.concatenate(img_array_list, axis = 0)
    train_full_array = np.concatenate(train_array_list, axis = 0)

    del img_MS_files, img_PAN_files
    gc.collect()

    return train_full_array, img_full_array

train_full_array, img_full_array = training_data_generation('x', 64, 64, 0.5, 0.5)

def identity_block(X, f, filters, stage, block):
    """
    Implementation of the identity block as defined in Figure 3

    Arguments:
    X -- input tensor of shape (m, n_H_prev, n_W_prev, n_C_prev)
    f -- integer, specifying the shape of the middle CONV's window for the main path
    filters -- python list of integers, defining the number of filters in the CONV layers of the main path
    stage -- integer, used to name the layers, depending on their position in the network
    block -- string/character, used to name the layers, depending on their position in the network

    Returns:
    X -- output of the identity block, tensor of shape (n_H, n_W, n_C)
    """

    # defining name basis
    conv_name_base = 'res' + str(stage) + block + '_branch'
    bn_name_base = 'bn' + str(stage) + block + '_branch'

    # Retrieve Filters
    F1, F2, F3 = filters

    # Save the input value. You'll need this later to add back to the main path.
    X_shortcut = X

    # First component of main path
    X = Conv2D(filters = F1, kernel_size = (1, 1), strides = (1,1), padding = 'valid', name = conv_name_base + '2a', kernel_initializer = glorot_uniform(seed=0))(X)
    X = BatchNormalization(axis = 3, name = bn_name_base + '2a')(X)
    X = Activation('relu')(X)


    # Second component of main path (≈3 lines)
    X = Conv2D(filters = F2, kernel_size = (f, f), strides = (1,1), padding = 'same', name = conv_name_base + '2b', kernel_initializer = glorot_uniform(seed=0))(X)
    X = BatchNormalization(axis = 3, name = bn_name_base + '2b')(X)
    X = Activation('relu')(X)

    # Third component of main path (≈2 lines)
    X = Conv2D(filters = F3, kernel_size = (1, 1), strides = (1,1), padding = 'valid', name = conv_name_base + '2c', kernel_initializer = glorot_uniform(seed=0))(X)
    X = BatchNormalization(axis = 3, name = bn_name_base + '2c')(X)

    # Final step: Add shortcut value to main path, and pass it through a RELU activation (≈2 lines)
    X = Add()([X, X_shortcut])
    X = Activation('relu')(X)


    return X

def convolutional_block(X, f, filters, stage, block, s = 2):
    """
    Implementation of the convolutional block as defined in Figure 4

    Arguments:
    X -- input tensor of shape (m, n_H_prev, n_W_prev, n_C_prev)
    f -- integer, specifying the shape of the middle CONV's window for the main path
    filters -- python list of integers, defining the number of filters in the CONV layers of the main path
    stage -- integer, used to name the layers, depending on their position in the network
    block -- string/character, used to name the layers, depending on their position in the network
    s -- Integer, specifying the stride to be used

    Returns:
    X -- output of the convolutional block, tensor of shape (n_H, n_W, n_C)
    """

    # defining name basis
    conv_name_base = 'res' + str(stage) + block + '_branch'
    bn_name_base = 'bn' + str(stage) + block + '_branch'

    # Retrieve Filters
    F1, F2, F3 = filters

    # Save the input value
    X_shortcut = X


    ##### MAIN PATH #####
    # First component of main path
    X = Conv2D(F1, (1, 1), strides = (s,s), name = conv_name_base + '2a', kernel_initializer = glorot_uniform(seed=0))(X)
    X = BatchNormalization(axis = 3, name = bn_name_base + '2a')(X)
    X = Activation('relu')(X)

    # Second component of main path (≈3 lines)
    X = Conv2D(filters = F2, kernel_size = (f, f), strides = (1,1), padding = 'same', name = conv_name_base + '2b', kernel_initializer = glorot_uniform(seed=0))(X)
    X = BatchNormalization(axis = 3, name = bn_name_base + '2b')(X)
    X = Activation('relu')(X)


    # Third component of main path (≈2 lines)
    X = Conv2D(filters = F3, kernel_size = (1, 1), strides = (1,1), padding = 'valid', name = conv_name_base + '2c', kernel_initializer = glorot_uniform(seed=0))(X)
    X = BatchNormalization(axis = 3, name = bn_name_base + '2c')(X)


    ##### SHORTCUT PATH #### (≈2 lines)
    X_shortcut = Conv2D(filters = F3, kernel_size = (1, 1), strides = (s,s), padding = 'valid', name = conv_name_base + '1',
                        kernel_initializer = glorot_uniform(seed=0))(X_shortcut)
    X_shortcut = BatchNormalization(axis = 3, name = bn_name_base + '1')(X_shortcut)

    # Final step: Add shortcut value to main path, and pass it through a RELU activation (≈2 lines)
    X = Add()([X, X_shortcut])
    X = Activation('relu')(X)


    return X

def ResNet50(input_shape=(64, 64, 4), classes=6):
    """
    Implementation of the popular ResNet50 the following architecture:
    CONV2D -> BATCHNORM -> RELU -> MAXPOOL -> CONVBLOCK -> IDBLOCK*2 -> CONVBLOCK -> IDBLOCK*3
    -> CONVBLOCK -> IDBLOCK*5 -> CONVBLOCK -> IDBLOCK*2 -> AVGPOOL -> TOPLAYER

    Arguments:
    input_shape -- shape of the images of the dataset
    classes -- integer, number of classes

    Returns:
    model -- a Model() instance in Keras
    """

    # Define the input as a tensor with shape input_shape
    X_input = Input(input_shape)

    # Zero-Padding
    #X = ZeroPadding2D((3, 3))(X_input)

    # Stage 1
    X = Conv2D(512, (11, 11),padding='same', name='conv1', kernel_initializer=glorot_uniform(seed=0))(X_input)
    X = BatchNormalization(axis=3, name='bn_conv1')(X)
    X = Activation('relu')(X)
    #X = MaxPooling2D((3, 3), strides=(2, 2))(X)

    # Stage 2
    X = convolutional_block(X, f=11, filters=[256,64, 64], stage=2, block='a', s=1)
    X = identity_block(X, 11, [256,64, 64], stage=2, block='b')
    X = identity_block(X, 11, [256,64, 64], stage=2, block='c')

    ### START CODE HERE ###

    # Stage 3 (≈4 lines)
    X = convolutional_block(X, f = 9, filters = [128,64, 64], stage = 3, block='a', s = 1)
    X = identity_block(X, 9, [128,64, 64], stage=3, block='b')
    X = identity_block(X, 9, [128,64, 64], stage=3, block='c')
    X = identity_block(X, 9, [128,64, 64], stage=3, block='d')

    # Stage 4 (≈6 lines)
    X = convolutional_block(X, f = 7, filters = [64,32, 32], stage = 4, block='a', s = 1)
    X = identity_block(X, 7, [64,32, 32], stage=4, block='b')
    X = identity_block(X, 7, [64,32, 32], stage=4, block='c')
    X = identity_block(X, 7, [64,32, 32], stage=4, block='d')
    X = identity_block(X, 7, [64,32, 32], stage=4, block='e')
    X = identity_block(X, 7, [64,32, 32], stage=4, block='f')

    # Stage 5 (≈3 lines)
    X = convolutional_block(X, f = 5, filters = [32,16, 3], stage = 5, block='a', s = 1)
    X = identity_block(X, 5, [32,16, 3], stage=5, block='b')
    X = identity_block(X, 5, [32,16, 3], stage=5, block='c')

    # # AVGPOOL (≈1 line). Use "X = AveragePooling2D(...)(X)"
    # X = AveragePooling2D((2,2), name="avg_pool")(X)

    # ### END CODE HERE ###

    # # output layer
    # X = Flatten()(X)
    # X = Dense(classes, activation='softmax', name='fc' + str(classes), kernel_initializer = glorot_uniform(seed=0))(X)


    # Create model
    model = Model(inputs = X_input, outputs = X, name='ResNet50')
    model.compile(optimizer = Adam(lr = 0.001), loss = 'mse', metrics = ['mse', 'accuracy'])

    return model

model = ResNet50()

print(model.summary())

history = model.fit(train_full_array, img_full_array,
          batch_size=256,
          epochs=25,
          verbose=1)



import matplotlib.pyplot as plt

plt.plot(history.history['loss'])
# plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'validation'], loc='upper left')
plt.show()

plt.plot(history.history['accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'validation'], loc='upper left')
plt.show()

def image_model_predict(input_ms_image_filename, input_pan_image_filename, output_filename,
                        img_height_size, img_width_size, fitted_model,
                        percentage_overlap, write):



    with rasterio.open(input_ms_image_filename) as f:
        metadata = f.profile
        ms_img = np.transpose(f.read(tuple(np.arange(metadata['count']) + 1)), [1, 2, 0])

    with rasterio.open(input_pan_image_filename) as g:
        metadata_pan = g.profile
        pan_img = np.expand_dims(g.read(1), axis = 2)

    ms_to_pan_ratio = metadata['transform'][0] / metadata_pan['transform'][0]
    ms_img_upsampled = cv2.resize(ms_img, (int(ms_img.shape[1] * ms_to_pan_ratio), int(ms_img.shape[0] * ms_to_pan_ratio)),
                                  interpolation = cv2.INTER_CUBIC)
    pred_stack = np.concatenate((ms_img_upsampled, pan_img), axis = 2)


    y_size = ((pred_stack.shape[0] // img_height_size) + 1) * img_height_size
    y_pad = int(y_size - pred_stack.shape[0])
    x_size = ((pred_stack.shape[1] // img_width_size) + 1) * img_width_size
    x_pad = int(x_size - pred_stack.shape[1])

    img_complete = np.pad(pred_stack, ((0, y_pad), (0, x_pad), (0, 0)), mode = 'symmetric').astype(pred_stack.dtype)

    pred_img = np.zeros((img_complete.shape[0], img_complete.shape[1], ms_img.shape[2]))
    weight_mask = np.zeros((img_complete.shape[0], img_complete.shape[1], 1))
    img_holder = np.zeros((1, img_height_size, img_width_size, img_complete.shape[2]))


    for i in range(0, img_complete.shape[0] - img_height_size + 1, int((1 - percentage_overlap) * img_height_size)):
        for j in range(0, img_complete.shape[1] - img_width_size + 1, int((1 - percentage_overlap) * img_width_size)):
            img_holder[0] = img_complete[i : (i + img_height_size), j : (j + img_width_size), 0 : pred_stack.shape[2]]
            preds = fitted_model.predict(img_holder)
            pred_img[i : i + img_height_size, j : j + img_width_size, :] += preds[0, :, :, :]
            weight_mask[i : i + img_height_size, j : j + img_width_size, 0] += 1

    pred_img_complete = pred_img[0 : pan_img.shape[0], 0 : pan_img.shape[1], :]
    weight_mask_complete = weight_mask[0 : pan_img.shape[0], 0 : pan_img.shape[1], 0][:, :, np.newaxis]
    pred_img_final = (pred_img_complete / weight_mask_complete).astype(metadata['dtype'])


    metadata_pan['count'] = ms_img_upsampled.shape[2]
    with rasterio.open(output_filename, 'w', **metadata_pan) as dst:
        dst.write(np.transpose(pred_img_final, [2, 0, 1]))

    return pred_img_final

fin = image_model_predict('mstz.png','pantz.png','out.png',64,64,model,0.5,1)

ms = cv2.imread('mstz.png')
image_rgb = cv2.cvtColor(ms, cv2.COLOR_BGR2RGB)
plt.imshow(image_rgb)
plt.show()
pan = cv2.imread('pantz.png')
image_rgb2 = cv2.cvtColor(pan, cv2.COLOR_BGR2RGB)
plt.imshow(image_rgb2)
plt.show()
plt.imshow(fin)
plt.show()

def gammaCorrection(src, gamma):
    invGamma = 1 / gamma

    table = [((i / 255) ** invGamma) * 255 for i in range(256)]
    table = np.array(table, np.uint8)

    return cv2.LUT(src, table)

gamma = gammaCorrection(fin,2.2)

plt.imshow(fin)
plt.show()

def BrightnessContrast(brightness=0):

    # getTrackbarPos returns the current
    # position of the specified trackbar.
    brightness = cv2.getTrackbarPos('Brightness',
                                    'GEEK')

    contrast = cv2.getTrackbarPos('Contrast',
                                  'GEEK')

    effect = controller(img, brightness,
                        contrast)

    # The function imshow displays an image
    # in the specified window
    cv2.imshow('Effect', effect)

def controller(img, brightness=255,
               contrast=127):

    brightness = int((brightness - 0) * (255 - (-255)) / (510 - 0) + (-255))

    contrast = int((contrast - 0) * (127 - (-127)) / (254 - 0) + (-127))

    if brightness != 0:

        if brightness > 0:

            shadow = brightness

            max = 255

        else:

            shadow = 0
            max = 255 + brightness

        al_pha = (max - shadow) / 255
        ga_mma = shadow

        # The function addWeighted calculates
        # the weighted sum of two arrays
        cal = cv2.addWeighted(img, al_pha,
                              img, 0, ga_mma)

    else:
        cal = img

    if contrast != 0:
        Alpha = float(131 * (contrast + 127)) / (127 * (131 - contrast))
        Gamma = 127 * (1 - Alpha)

        # The function addWeighted calculates
        # the weighted sum of two arrays
        cal = cv2.addWeighted(cal, Alpha,
                              cal, 0, Gamma)

    # putText renders the specified text string in the image.
    cv2.putText(cal, 'B:{},C:{}'.format(brightness,
                                        contrast), (10, 30),
                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

    return cal

img = fin.copy()

# The function namedWindow creates a
# window that can be used as a placeholder
# for images.
cv2.namedWindow('GEEK')

# The function imshow displays an
# image in the specified window.
cv2.imshow('GEEK', original)

# createTrackbar(trackbarName,
# windowName, value, count, onChange)
  # Brightness range -255 to 255
cv2.createTrackbar('Brightness',
                    'GEEK', 255, 2 * 255,
                    BrightnessContrast)

# Contrast range -127 to 127
cv2.createTrackbar('Contrast', 'GEEK',
                    127, 2 * 127,
                    BrightnessContrast)


BrightnessContrast(0)